name: LANraragi API Integration Tests

on:
  pull_request:
    branches: 
      - main
      - 'dev-*/main'
  push:
    branches: 
      - main
  schedule:
    - cron: '0 0 * * 4' # Run integration tests on main branch every Thursday at 00:00
  workflow_call:

jobs:

  # integration-tests-ubuntu:
  #   name: Integration Tests (Ubuntu)
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
    
  #   permissions:
  #     contents: read
  #     packages: read
    
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
        
  #     - name: Set up Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: '3.12'
          
  #     - name: Install main package (aio-lanraragi)
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install ".[dev]"
          
  #     - name: Move to integration_tests and install test library
  #       run: |
  #         cd integration_tests
  #         pip install .
          
  #     - name: Run integration tests
  #       run: |
  #         cd integration_tests
  #         export CI=true
  #         pytest tests --log-cli-level=INFO \
  #           --git-url=https://github.com/difegue/LANraragi.git \
  #           --git-branch=dev \
  #           --docker-api \
  #           --npseed 42 \
  #           --exitfirst
  #       env:
  #         # Ensure Docker daemon is accessible to Python docker SDK
  #         DOCKER_HOST: unix:///var/run/docker.sock
  
  # windows integration tests
  # refer to https://github.com/Difegue/LANraragi/blob/dev/.github/workflows/push-continous-delivery.yml
  integration-tests-windows:
    name: Integration Tests (Windows)
    runs-on: windows-2025
    timeout-minutes: 60
    environment: lrr

    permissions:
      contents: read
      packages: read
      
    steps:
      # Using prebuilt windist from S3; build steps not required
      
      # Prepare win-dist from S3 artifact instead of uploading
      # Required environment secrets (environment: lrr): AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, S3_BUCKET, S3_REGION
      - name: Set S3 object key for windist zip
        shell: pwsh
        run: |
          $s3Key = "lanraragi/windist/79/merge/LANraragi-win-20250915-001751-50c809b.zip"
          "S3_OBJECT_KEY=$s3Key" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "ARCHIVE_NAME=$([System.IO.Path]::GetFileName($s3Key))" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.S3_REGION }}

      - name: Ensure AWS CLI is available
        shell: pwsh
        run: |
          if (Get-Command aws -ErrorAction SilentlyContinue) {
            aws --version
          } else {
            Write-Host "AWS CLI not found. Installing..."
            $msi = "$env:RUNNER_TEMP\AWSCLIV2.msi"
            Invoke-WebRequest -Uri "https://awscli.amazonaws.com/AWSCLIV2.msi" -OutFile $msi
            Start-Process msiexec.exe -ArgumentList "/i `"$msi`" /qn" -Wait
            $awsPath = "C:\Program Files\Amazon\AWSCLIV2\aws.exe"
            if (Test-Path $awsPath) {
              & $awsPath --version
              $env:PATH = "C:\Program Files\Amazon\AWSCLIV2;$env:PATH"
              "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append
            } else {
              Write-Error "Failed to install AWS CLI."
              exit 1
            }
          }

      - name: Download windist from S3
        shell: pwsh
        run: |
          if ([string]::IsNullOrWhiteSpace("${{ secrets.S3_BUCKET }}")) {
            Write-Error "S3_BUCKET environment secret is not set."
            exit 1
          }
          $download = Join-Path $env:GITHUB_WORKSPACE $env:ARCHIVE_NAME
          $s3uri = "s3://${{ secrets.S3_BUCKET }}/$($env:S3_OBJECT_KEY)"
          aws s3 cp "$s3uri" "$download" --only-show-errors

      - name: Unzip windist to expected test site
        shell: pwsh
        run: |
          $dest = Join-Path $env:GITHUB_WORKSPACE "LANraragi\win-dist"
          New-Item -ItemType Directory -Path $dest -Force | Out-Null
          $zip = Join-Path $env:GITHUB_WORKSPACE $env:ARCHIVE_NAME
          Expand-Archive -Path $zip -DestinationPath $dest -Force
          Write-Host "Expanded to: $dest"

      - name: Checkout aio-lanraragi
        uses: actions/checkout@v4
        with:
          path: aio-lanraragi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install main package (aio-lanraragi)
        working-directory: aio-lanraragi
        run: |
          python -m pip install --upgrade pip
          pip install ".[dev]"

      - name: Install test library
        working-directory: aio-lanraragi/integration_tests
        run: |
          pip install .

      - name: Run integration tests
        working-directory: aio-lanraragi/integration_tests
        run: |
          $env:CI='true'
          pytest tests/test_simple.py::test_archive_upload `
          --log-cli-level=INFO `
          --windist "$env:GITHUB_WORKSPACE\\LANraragi\\win-dist" `
          --npseed 42 `
          --exitfirst

  check:
    if: always()

    needs:
      # - integration-tests-ubuntu
      - integration-tests-windows
    runs-on: ubuntu-latest
    steps:
      - name: Check if integration tests passed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJson(needs) }}